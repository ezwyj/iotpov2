#include <Adafruit_DotStar.h>
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SPI.h> 



#define MaxStripNum 20
#define switchPin 14

const char* ssid = "ChinaNetuPTU";//"free";
const char* password = "h5rcuvdw";//"133133133";
const char* mqtt_server = "120.76.147.152";

uint32_t contentA[100][MaxStripNum]={ 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfefefd, 0xd8c219, 0xdbcd79, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xd9c620, 0xd40000, 0xd50000, 0xd40000, 0xd50000, 0xf6f5eb, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xd70001, 0xd60000, 0xd60000, 0xd60000, 0xd60000, 0xd50000, 0xd40000, 0xdbc31d, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xd22705, 0xd90000, 0xdcc41a, 0xd92807, 0xdcc41b, 0xdbc41a, 0xddb01c, 0xdc8216, 0xd30501, 0xdcbf1c, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xdec51d, 0xdcc51b, 0xdec520, 0xddc61e, 0xdcc61c, 0xdcc61b, 0xdcc61b, 0xdcc61b, 0xdbc51b, 0xdac419, 0xd80000, 0xd8c419, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfefffe, 0xd53b09, 0xddc71c, 0xdec81d, 0xdec81c, 0xddc71c, 0xdec81c, 0xddc71b, 0xdcc61b, 0xddc61d, 0xdcc61a, 0xdac31c, 0xdc6714, 0xf9fafa, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe0c81b, 0xdec81d, 0xdec81c, 0xd90000, 0xdec71c, 0xdfc91e, 0xdec81d, 0xddc71c, 0xdec81d, 0xd9c01b, 0xdcc41e, 0xdd0000, 0xda0100, 0xda0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfefffc, 0xe0ca1f, 0xd88c17, 0xd90000, 0xda0001, 0xdb2506, 0xe1bf1e, 0xd70100, 0xddc81e, 0xdec81c, 0xe2ab1e, 0xdfc91d, 0xdfc91e, 0xdc0000, 0xdfc81c, 0xfcfdf9, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe0c81f, 0xdfc820, 0xda0000, 0xd51e05, 0xe0360a, 0xda0000, 0xdfc71b, 0xdcc51c, 0xe0cb20, 0xe1cb20, 0xdb0001, 0xe1ca21, 0xdec81d, 0xdb0000, 0xdec81d, 0xe3ab1f, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xd90000, 0xe0c920, 0xdec71f, 0xdb0001, 0xdfc820, 0xda0701, 0xddc81d, 0xe1cc1f, 0xe0ca1f, 0xdfc91e, 0xe0ca1f, 0xd93208, 0xdfc91c, 0xda0000, 0xdec71e, 0xda0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xdb0000, 0xe0c921, 0xe2cb23, 0xd70100, 0xda0000, 0xdd0000, 0xdc0000, 0xda0a01, 0xe0ca1f, 0xe2c523, 0xda0000, 0xdfc91e, 0xdfc91e, 0xd80000, 0xdfc91e, 0xd90000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xd80600, 0xe0c923, 0xe1ca24, 0xe0c920, 0xdd0000, 0xdb7713, 0xe0c921, 0xe1cb20, 0xe1cb20, 0xe0ca1f, 0xe0ca1f, 0xe1c81e, 0xe1c71d, 0xdb0000, 0xdec71e, 0xdb0000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe0ca26, 0xe1ca25, 0xe1cb27, 0xe2c123, 0xe45d14, 0xe1ca22, 0xde0000, 0xe1cb20, 0xe1cb20, 0xe0ca1f, 0xe0ca1f, 0xdfc91e, 0xd80100, 0xdec821, 0xdec71d, 0xddc81d, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xfefefd, 0xdc0102, 0xdb0000, 0xe2ca22, 0xe1ca22, 0xe1ca21, 0xe1cb20, 0xdd0000, 0xe0ca1f, 0xe0ca1f, 0xe0ca1f, 0xdfc91d, 0xdec81d, 0xdec71f, 0xda0000, 0xfdfefc, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe1cb33, 0xde0301, 0xe1cb25, 0xe1ca23, 0xe1ca23, 0xe1ca22, 0xe0c921, 0xe0c921, 0xe0ca1f, 0xe0ca1e, 0xe0ca1e, 0xdfc91e, 0xd84e0e, 0xddc820, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe5da79, 0xdc0001, 0xe2cb25, 0xe1ca23, 0xe1ca23, 0xe0c921, 0xe0c921, 0xe0c921, 0xe0ca1e, 0xdfc820, 0xdc0001, 0xe27015, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe7d97e, 0xdc0000, 0xdc0100, 0xe1ca23, 0xe0c921, 0xe0ca1f, 0xdfc81f, 0xd90e03, 0xd90000, 0xdfc71d, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xe6d65f, 0xe0a61d, 0xdb0000, 0xda0000, 0xdd6912, 0xe0ca22, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff };


int sleepTime = 10;
uint64_t workTime = 0;
boolean workState = false;

int toInt(byte* payload, int length)
{
	int i;
	char val[10];
	for (i = 0; i < length; i++)
		val[i] = payload[i];
	val[i] = '\0';

	return atoi(val);
}
void setup_wifi() {

	delay(10);
	// We start by connecting to a WiFi network
	Serial.println();
	Serial.print(F("Connecting to "));
	Serial.println(ssid);
	WiFi.begin(ssid, password);
	while (WiFi.status() != WL_CONNECTED) {
		delay(500);
		Serial.print(".");
	}

	Serial.println("");
	Serial.println("WiFi connected");
	Serial.println("IP address: ");
	Serial.println(WiFi.localIP());
}
Adafruit_DotStar strip = Adafruit_DotStar(MaxStripNum, 4, 5, DOTSTAR_BRG);
//APA102<4, 5> strip;
WiFiClient espClient;

void callback(char *topic, byte* payload, unsigned int length) {
	Serial.print("Message arrived [");
	Serial.print(topic);
	Serial.print("] ");
	for (int i = 0; i<length; i++) {
		Serial.print((char)payload[i]);
	}
	Serial.println();
	String sTopic = topic;

	if (sTopic == "WorkState")
	{

		int w = toInt(payload, 1);
		if (w == 1)
		{

			workState = true;
		}
		else
		{
			workState = false;
		}

	}
	if (sTopic == "Sleep")
	{
		int s = toInt(payload, 3);
		sleepTime = s;

	}
	if (sTopic == "Content")
	{

		String readRString;
		readRString = readRString + (char)payload[0];
		readRString = readRString + (char)payload[1];//+ (char)payload[2];
		readRString = readRString + (char)payload[2];

		int x = readRString.toInt();
		Serial.println(x);

		for (int i = 0; i<(length - 3) / 6; i++){
			char color[6];
			color[0] = payload[i * 6 + 3];
			color[1] = payload[i * 6 + 4];
			color[2] = payload[i * 6 + 5];
			color[3] = payload[i * 6 + 6];
			color[4] = payload[i * 6 + 7];
			color[5] = payload[i * 6 + 8];
			uint32_t c = strtoul(color, 0, 16);
			contentA[x][i] = c;
		}
	}
}
PubSubClient client(mqtt_server, 1883, callback, espClient);
void reconnect() {
	// Loop until we're reconnected
	while (!client.connected()) {
		Serial.print("Attempting MQTT connection...");
		// Attempt to connect
		if (client.connect("arduinoClient", "iotpov_chengdu/test0001", "Khb78JCWUy2Lqj3miH8bSR45WbC32qM577rHsuDjbYg=")) {
			Serial.println("connected");
			client.subscribe("Content");
			client.subscribe("Sleep");
			client.subscribe("WorkState");
			client.subscribe("WorkTime");
		}
		else {
			Serial.print("failed, rc=");
			Serial.print(client.state());
			Serial.println(" try again in 5 seconds");
			delay(5000);
		}
	}
}

void setup() {

	Serial.begin(9600);
	setup_wifi();
	strip.setBrightness(15);
	strip.begin(); // Initialize pins for output
	strip.show();  // Turn all LEDs off ASAP
	pinMode(switchPin, INPUT);

	attachInterrupt(switchPin, initLocation, CHANGE);
}
int y;
int a;
long lastShowTime;
void initLocation(){
	y = 0;
}
long lasttime;
void loop() {



	//for (int x = location; x < 90; x++){


	for (a = 0; a <= 19; a++){
		strip.setPixelColor(a, contentA[y][a]);
	}
	strip.show();

	if (y >= 100){
		y = 0;
		strip.clear();
	}
	else
	{
		y++;
		delay(1);
		strip.clear();
	}
	// delay(200);

	//Serial.println(y);
	//
	//}

	if (!client.connected()) {
		reconnect();
	}
	client.loop();


}


